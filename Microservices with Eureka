üëâUser Service, Buy Service, and Payment Service,
üëâ All registered with Eureka Server,
üëâ With proper functioning code for basic working APIs.

‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê


üèó Final Setup Structure

eureka-server/
user-service/
buy-service/
payment-service/

‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê


üì¶ Full Folder Structure Example

/eureka-server
    /src/main/java
        /EurekaServerApplication.java
    /src/main/resources
        application.properties

/user-service
    /src/main/java
        /controller/UserController.java
        /UserServiceApplication.java
    /src/main/resources
        application.properties

/buy-service
    /src/main/java
        /controller/BuyController.java
        /BuyServiceApplication.java
    /src/main/resources
        application.properties

/payment-service
    /src/main/java
        /controller/PaymentController.java
        /PaymentServiceApplication.java
    /src/main/resources
        application.properties

‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê

1. üåê Eureka Server
eureka-server



‚úÖ pom.xml dependencies

<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
</dependency>



‚úÖ Main Class

@SpringBootApplication
@EnableEurekaServer
public class EurekaServerApplication {
    public static void main(String[] args) {
        SpringApplication.run(EurekaServerApplication.class, args);
    }
}



‚úÖ application.properties

server.port=8761
spring.application.name=eureka-server

eureka.client.register-with-eureka=false
eureka.client.fetch-registry=false


‚úÖ Run EurekaServerApplication
Access Eureka Dashboard: http://localhost:8761/


‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê
2. üë§ User Service
user-service

‚úÖ pom.xml dependencies

<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
</dependency>
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-web</artifactId>
</dependency>



‚úÖ Main Class

@SpringBootApplication
@EnableEurekaClient
public class UserServiceApplication {
    public static void main(String[] args) {
        SpringApplication.run(UserServiceApplication.class, args);
    }
}



‚úÖ application.properties

server.port=8081
spring.application.name=user-service
eureka.client.service-url.defaultZone=http://localhost:8761/eureka



‚úÖ UserController.java

@RestController
@RequestMapping("/users")
public class UserController {

    @GetMapping("/{id}")
    public String getUser(@PathVariable String id) {
        return "User details for user ID: " + id;
    }
}


‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê

3. üõí Buy Service
buy-service

‚úÖ pom.xml dependencies

<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
</dependency>
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-web</artifactId>
</dependency>


‚úÖ Main Class

@SpringBootApplication
@EnableEurekaClient
public class BuyServiceApplication {
    public static void main(String[] args) {
        SpringApplication.run(BuyServiceApplication.class, args);
    }
}


‚úÖ application.properties

properties
Copy
Edit
server.port=8082
spring.application.name=buy-service

eureka.client.service-url.defaultZone=http://localhost:8761/eureka



‚úÖ BuyController.java

@RestController
@RequestMapping("/buy")
public class BuyController {

    @GetMapping("/product/{id}")
    public String buyProduct(@PathVariable String id) {
        return "Product with ID " + id + " bought successfully!";
    }
}


‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê
4. üí≥ Payment Service
payment-service

‚úÖ pom.xml dependencies
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
</dependency>
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-web</artifactId>
</dependency>


‚úÖ Main Class

@SpringBootApplication
@EnableEurekaClient
public class PaymentServiceApplication {
    public static void main(String[] args) {
        SpringApplication.run(PaymentServiceApplication.class, args);
    }
}



‚úÖ application.properties

server.port=8083
spring.application.name=payment-service

eureka.client.service-url.defaultZone=http://localhost:8761/eureka



‚úÖ PaymentController.java

@RestController
@RequestMapping("/payment")
public class PaymentController {

    @PostMapping("/pay")
    public String makePayment(@RequestParam double amount) {
        return "Payment of $" + amount + " completed successfully!";
    }
}


‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê


üî• How to Run Everything
Start eureka-server first (port 8761)

Start user-service (port 8081)

Start buy-service (port 8082)

Start payment-service (port 8083)

Go to http://localhost:8761/ and check ‚Äî all services listed üéØ

Now you can hit APIs like:

http://localhost:8081/users/1

http://localhost:8082/buy/product/10

http://localhost:8083/payment/pay?amount=500
